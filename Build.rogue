# To run this build file, install Rogue from github.com/AbePralle/Rogue and type "rogo" at the command line.

# Rogo is a "build your own build system" facilitator. At its core Rogo just recompiles build files if
# needed and then runs the build executable while forwarding any command line arguments. This file contains
# a default framework which uses introspection to turn command line arguments into parameterized routine calls.

# Example: to handle the command "rogo abc xyz 5", define "routine rogo_abc_xyz( n:Int32 )".

# "rogo_default" will run in the absence of any other command line argument.

#$ LIBRARIES(Linux) = libsdl1.2-dev(sdl)
#$ LIBRARIES(macOS) = sdl
#$ LIBRARIES = cmake
#$ LIBRARIES = curl
#$ LIBRARIES = xz

# description()s are optional - Rogo uses introspection to determine which commands are available.
# 'rogo help default' displays the description for "default", etc.
description( "default", "The default action is performed when no other actions are specified. Use 'rogo default' to explicitly perform the default option." )
description( "help",    "Displays a list of all actions that can be performed by Rogo." )

routine rogo_default
  if (not File.exists("libtmt"))
    execute @|git clone https://github.com/MurphyMc/libtmt
  endIf

  if (System.is_macos)
    local dmg_filepath = "Command_Line_Tools_macOS_10.13_for_Xcode_10.1.dmg"
    local volume_filepath = "/Volumes/Command Line Developer Tools"
    local sdk_filepath = "MacOSX10.13.sdk"
    if (not File.exists(sdk_filepath) and File.exists(dmg_filepath))
      println "Extracting Mac OSX 10.13 SDK from Command Line Tools DMG"
      execute( "hdiutil mount $ > /dev/null" (dmg_filepath) )
      File.delete( "TempCommandLineTools" )
      execute(''pkgutil --expand-full "$/Command Line Tools (macOS High Sierra version 10.13).pkg" TempCommandLineTools'' (volume_filepath) )
      execute(''mv TempCommandLineTools/CLTools_SDK_macOS1014.pkg/Payload/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk $'' (sdk_filepath) )
      execute( "rm -rf TempCommandLineTools" )
      execute( ''diskutil unmount "$"'' (volume_filepath) )
      if ("yes".begins_with(Console.input("Delete $? (yes/no)> "(dmg_filepath)).to_lowercase))
        File.delete( dmg_filepath )
      endIf
    endIf
    if (not File.exists(sdk_filepath))
      println @|====================================================================================================
               |ATTENTION
               |
               |macOS SDK 10.13 is required to build antsy.
               |
               |The most legitimate way to obtain it is to:
               |
               |  1. Go to this Apple software download page:
               |
               |     https://developer.apple.com/download/more/
               |
               |  2. Search for:
               |
               |     Command Line Tools (macOS 10.13) for Xcode 10.1
               |
               |  3. Download the DMG ("Command_Line_Tools_macOS_10.13_for_Xcode_10.1.dmg") to this antsy folder.
               |
               |  4. Rerun 'rogo' to automatically extract the SDK from the DMG and continue the build.
               |
               |Other options:
               |
               |  1. You can run 'rogo download sdk' to have Rogo download a copy from GitHub.
               |
               |  2. You can obtain a copy yourself and place it in this antsy folder as "MacOSX10.13.sdk".
               |====================================================================================================
      throw Error( "ERROR: Missing $/" (sdk_filepath) )
    endIf
  endIf

  if (File.exists("CMakeCache.txt"))
    # See if CMake is cached to a different folder (easily happens when using Parallels)
    contingent
      local cmake_cachefile_dir = File.load_as_string( "CMakeCache.txt" ).split( '\n' ).find( $.contains("CMAKE_CACHEFILE_DIR") )
      necessary (cmake_cachefile_dir.exists)
      local cmake_path = cmake_cachefile_dir.value.after_first( "INTERNAL=" )
      necessary (cmake_path == cwd)
    unsatisfied
      rogo_clean
    endContingent
  endIf

  if (not File.exists("CMakeCache.txt"))
    if (System.is_macos)
      execute( ''cmake -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13 -DMAC_SDK_ROOT="$/MacOSX10.13.sdk" .'' (cwd) )
    else
      execute( "cmake ." )
    endIf
  endIf

  execute( "cmake --build ." )
endRoutine

routine rogo_download_sdk
  println @|This command downloads macOS 10.13 SDK from the following URL:
           |
           |  https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.13.sdk.tar.xz
           |
           |We make no warranties as to the integrity or safety of this SDK; it is untrusted but not DIStrusted.
           |
  if ("yes".begins_with(Console.input("Download the the macOS 10.13 SDK from github.com/phracker (yes/no)? ").to_lowercase))
    execute @|curl -L "https://github.com/phracker/MacOSX-SDKs/releases/download/10.13/MacOSX10.13.sdk.tar.xz" -o MacOSX10.13.sdk.tar.xz

    local reference_sha = "b28b6489ae9287b4f3575bdd6d5450f33e6ea1d2f706d5579f839a494937e8ab"
    # This is the sha256 of phracker's MacOSX10.13.sdk.tar.xz as of 2019.09.09. While we neither
    # trust nor distrust this SDK, we will at least make sure it isn't unexpectedly modified.
    if (sha256 != reference_sha)
      throw Error( "ERROR: MacOSX10.13.sdk.tar.gz sha256 has changed - expected $, got $." (reference_sha,sha256) )
    endIf

    execute @|xz -d MacOSX10.13.sdk.tar.xz
    execute @|tar -xf MacOSX10.13.sdk.tar
    File.delete( "MacOSX10.13.sdk.tar" )

    println "\nNow run 'rogo' to build antsy!"
  endIf
endRoutine

routine sha256->String
  local cmd = "shasum -a 256 MacOSX10.13.sdk.tar.xz"
  local result = Process.run( cmd )
  if (not result.success) throw Error( "ERROR running: " + cmd )
  return result->String.before_first( ' ' ).trimmed
endRoutine

routine cwd->String
  return Process.run( "pwd", &inherit_environment )->String.trimmed
endRoutine

routine rogo_clean
  # Delete all CMake-generated files
  println "Deleting CMake cache"
  File.delete( "CMakeCache.txt" )
  File.delete( "CMakeFiles/" )
  File.delete( "Makefile" )
  File.delete( "cmake_install.cmake" )

  File.delete( "antsy" )
endRoutine

routine execute( commands:String, &suppress_error )->Logical
  forEach (cmd in LineReader(commands))
    print( "> " ).println( cmd )
    if (System.run(cmd) != 0)
      if (suppress_error) return false
      else                throw Error( "Build failed." )
    endIf
  endForEach
  return true
endRoutine

#------------------------------------------------------------------------------
# Introspection-based Launcher Framework
#------------------------------------------------------------------------------
routine syntax( command:String, text:String )
  Build.rogo_syntax[ command ] = text
endRoutine

routine description( command:String, text:String )
  Build.rogo_descriptions[ command ] = text
endRoutine

routine help( command:String, description=null:String, syntax=null:String )
  if (description) Global.description( command, description )
  if (syntax)      Global.syntax( command, syntax )
endRoutine

try
  Build.launch
catch (err:Error)
  Build.rogo_error = err
  Build.on_error
endTry

class Build [singleton]
  PROPERTIES
    rogo_syntax         = StringTable<<String>>()
    rogo_descriptions   = StringTable<<String>>()
    rogo_prefix         = ?:{ $moduleName.count:$moduleName "::" || "" } + "rogo_" : String
    rogo_command        = "default"
    rogo_args           = @[]
    rogo_error          : Error

    LOCAL_DEFS_FILE     = "Local.mk"

  METHODS
    method launch
      rogo_args.add( forEach in System.command_line_arguments )
      read_defs
      on_launch
      parse_args
      dispatch_command

    method dispatch_command
      local m = find_command( rogo_command )
      require m

      local args = @[]
      forEach (arg in rogo_args)
        which (arg)
          case "true":  args.add( true )
          case "false": args.add( false )
          case "null":  args.add( NullValue )
          others:       args.add( arg )
        endWhich
      endForEach
      if (m.parameter_count == 1 and args.count > 1) args = @[ args ] # Wrap args in a ValueList.
      m.call( Global, args )

    method find_command( name:String )->MethodInfo
      return <<Global>>.find_method( rogo_prefix + name )

    method on_error
      Console.error.println rogo_error
      on_exit
      System.exit 1

    method on_command_found
      noAction

    method on_command_not_found
      println "=" * 79
      println "ERROR: No such command '$'." (rogo_args.first)
      println "=" * 79
      println
      rogo_command = "help"
      rogo_args.clear
      on_command_found

    method on_launch
      noAction

    method on_exit
      noAction

    method parse_args
      block
        if (rogo_args.count)
          local parts = String[]
          parts.add( forEach in rogo_args )
          rogo_args.clear

          while (parts.count)
            local cmd = _join( parts )
            if (find_command(cmd))
              rogo_command = cmd
              on_command_found
              escapeBlock
            endIf
            rogo_args.insert( parts.remove_last )
          endWhile

          on_command_not_found
        endIf

        # Use default command
        on_command_found
      endBlock

    method read_defs
      read_defs( LOCAL_DEFS_FILE )

    method read_defs( defs_filepath:String )
      # Attempt to read defs from Local.mk
      local overrides = String[]
      if (File.exists(defs_filepath))
        forEach (line in LineReader(File(defs_filepath)))
          if (line.contains("="))
            local name  = line.before_first('=').trimmed
            local value = line.after_first('=').trimmed
            if (value.begins_with('"') or value.begins_with('\''))
              value = value.leftmost(-1).rightmost(-1)
            endIf
            local p = <<Build>>.find_property( name )
            if (p)
              overrides.add( "$ = $" (name,value) )
              <<Build>>.set_property( this, p, Value(value) )
            endIf
          endIf
        endForEach
      endIf

    method _join( value:Value )->String
      local args = String[]
      args.add( forEach in value )
      return args.join( "_" )
endClass


routine rogo_help( command="":String )
  command = Build._join( Build.rogo_args )
  if (command.count)
    local syntax = get_syntax( command )
    local success = false
    if (syntax)
      println "SYNTAX"
      println "  " + syntax
      println
      success = true
    endIf
    local description = get_description( command )
    if (description)
      println "DESCRIPTION"
      forEach (line in LineReader(description.word_wrapped(76)))
        print( "  " ).println( line )
      endForEach
      println
      success = true
    endIf
    if (success)
      return
    else
      println "=" * 79
      println "ERROR: No such command '$'." (command)
      println "=" * 79
      println
    endIf
  endIf

  println "USAGE"
  local lines = String[]
  forEach (m in <<Global>>.methods)
    if (m.name.begins_with(Build.rogo_prefix))
      lines.add( "  " + get_syntax(m.name.after_first(Build.rogo_prefix)) )
    endIf
  endForEach
  lines.sort( (a,b)=>(a<b) )
  println (forEach in lines)
  println
endRoutine


routine get_syntax( m_name:String )->String
  if (Build.rogo_syntax.contains(m_name))
    return "rogo " + Build.rogo_syntax[ m_name ]
  else
    local m = <<Global>>.find_method( Build.rogo_prefix + m_name )
    if (not m) return null
    local line = "rogo $" (m_name.replacing('_',' '))
    line += " <$>" (m.parameter_name(forEach in 0..<m.parameter_count))
    return line
  endIf
endRoutine


routine get_description( m_name:String )->String
  if (Build.rogo_descriptions.contains(m_name))
    return Build.rogo_descriptions[ m_name ]
  else
    return null
  endIf
endRoutine
